/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lab1;

import java.awt.Color;
import java.awt.Graphics;
import javax.swing.JOptionPane;

/**
 *
 * @author User
 */
public class Arbol extends javax.swing.JFrame {

    Nodo raiz = null;

    /**
     * Creates new form Arbol
     */
    public Arbol() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PanelArbol = new javax.swing.JPanel();
        AgregarHijoButton = new javax.swing.JButton();
        AgregarHijosTxt = new javax.swing.JTextField();
        MostrarButton = new javax.swing.JButton();
        AgregarTxt1 = new javax.swing.JTextField();
        Agregar1 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout PanelArbolLayout = new javax.swing.GroupLayout(PanelArbol);
        PanelArbol.setLayout(PanelArbolLayout);
        PanelArbolLayout.setHorizontalGroup(
            PanelArbolLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 894, Short.MAX_VALUE)
        );
        PanelArbolLayout.setVerticalGroup(
            PanelArbolLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 416, Short.MAX_VALUE)
        );

        AgregarHijoButton.setText("Agregar Hij@");
        AgregarHijoButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AgregarHijoButtonMouseClicked(evt);
            }
        });

        MostrarButton.setText("Mostrar");
        MostrarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MostrarButtonActionPerformed(evt);
            }
        });

        Agregar1.setText(" Raiz");
        Agregar1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Agregar1MouseClicked(evt);
            }
        });

        jButton1.setText("jButton1");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("jButton2");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(PanelArbol, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(129, 129, 129)
                .addComponent(AgregarTxt1, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(Agregar1)
                .addGap(73, 73, 73)
                .addComponent(AgregarHijosTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(AgregarHijoButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(51, 51, 51))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(MostrarButton)
                .addGap(228, 228, 228))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(PanelArbol, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 57, Short.MAX_VALUE)
                .addComponent(MostrarButton)
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(AgregarTxt1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Agregar1)
                        .addComponent(AgregarHijosTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(AgregarHijoButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)))
                .addGap(43, 43, 43))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AgregarHijoButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AgregarHijoButtonMouseClicked

        if (raiz != null) {

            String respuesta = JOptionPane.showInputDialog("Escribe el padre del nodo");
            String[] options = {"Hijo Derecho", "Hijo Izquierdo"};
            int seleccion = JOptionPane.showOptionDialog(null, "Es necesario que seleccione una opcion", "Titulo", JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[0]);
            if (!respuesta.isEmpty()) {
                Nodo xy = BuscarNodo(raiz, respuesta.trim());

                if (xy != null) {
                    if (seleccion == 0) {

                        if (xy.getDerecho() == null) {
                            xy.setDerecho(new Nodo(AgregarHijosTxt.getText()));
                        } else {
                            JOptionPane.showMessageDialog(null, "Hijo Derecho de " + respuesta + " Ya fue escogido", "Error", JOptionPane.WARNING_MESSAGE);
                        }

                    } else {
                        if (seleccion == 1) {
                            if (xy.getIzquierdo() == null) {
                                xy.setIzquierdo(new Nodo(AgregarHijosTxt.getText()));
                            } else {
                                JOptionPane.showMessageDialog(null, "Hijo Izquierdo de " + respuesta + " Ya fue escogido", "Error", JOptionPane.WARNING_MESSAGE);
                            }

                        }

                    }

                } else {
                    JOptionPane.showMessageDialog(null, " No se encontro " + respuesta, "Error", JOptionPane.WARNING_MESSAGE);

                }

            } else {
                JOptionPane.showMessageDialog(null, "Digite valor para el hij@", "Error", JOptionPane.WARNING_MESSAGE);

            }
        } else {

            JOptionPane.showMessageDialog(null, "Digite valor para la raiz", "Error", JOptionPane.WARNING_MESSAGE);
        }
        preOrder(raiz);
        System.out.println("");
        String Juan;
        Juan = "12";
        Nodo x = BuscarPadre(raiz, Juan);
        if (x != null) {
            System.out.println(x.getInfo() + "padre");

        }


    }//GEN-LAST:event_AgregarHijoButtonMouseClicked
    void preOrder(Nodo raiz) {
        if (raiz != null) {
            System.out.print("{" + raiz.getInfo() + "}");
            preOrder(raiz.getIzquierdo());
            preOrder(raiz.getDerecho());
        }
    }

    void dibujar() {
        Graphics gt = PanelArbol.getGraphics();
        gt.setColor(Color.black);
        gt.fillRect(PanelArbol.getWidth() / 2, 100, 50, 50);
        gt.setColor(Color.red);
        gt.drawRect(PanelArbol.getWidth() / 2, 100, 50, 50);

    }

    Nodo BuscarNodo(Nodo raiz, String dato) {

        if (raiz != null) {

            if (raiz.getInfo().equals(dato)) {
                return raiz;
            } else {
                Nodo x = BuscarNodo(raiz.getIzquierdo(), dato);
                Nodo y = BuscarNodo(raiz.getDerecho(), dato);
                if (x != null) {
                    return x;
                }
                if (y != null) {
                    return y;
                }
            }

        } else {
            return null;
        }
        return null;

    }

    boolean BuscarHermano(String y, String x) {
        Nodo hijo = BuscarPadre(raiz, y);
        Nodo hijo1 = BuscarPadre(raiz, x);
        if (hijo == hijo1) {
            return false;

        } else {
            return true;
        }
    }

    boolean BuscarAbuelo(Nodo raiz, Nodo hijo, Nodo a) {
        try {
            Nodo padre = BuscarPadre(raiz, hijo.info);
            Nodo abuelo = BuscarPadre(raiz, padre.info);
            if (abuelo == a) {
                return true;
            } else {
                return false;
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error");
            return false;
        }
    }

    Nodo BuscarAbuelo(Nodo raiz, Nodo hijo) {
        try {
            Nodo padre = BuscarPadre(raiz, hijo.info);
            Nodo abuelo = BuscarPadre(raiz, padre.info);
            if (abuelo != null) {
                return abuelo;
            } else {
                return null;
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error");
            return null;
        }
    }

    void BuscarTio(Nodo raiz, Nodo hijo, Nodo tio) {
        Nodo padre = BuscarPadre(raiz, hijo.info);
        boolean hermanos = BuscarHermano(padre.info, tio.info);
        if (hermanos == false) {
            System.out.println("El nodo " + hijo.info + " Su tio es " + tio.info);
        }

    }

    Boolean BuscarPrimo(Nodo raiz, Nodo a, Nodo b) {
        try {
            if (BuscarPadre(raiz, a.info) != BuscarPadre(raiz, b.info)) {
                if (BuscarAbuelo(raiz, a) == BuscarAbuelo(raiz, b)) {
                    return true;
                } else {
                    return false;
                }
            } else {
                return false;
            }

        } catch (Exception e) {
            return false;
        }
    }

    Nodo BuscarPadre(Nodo raiz, String hijo) {
        if (raiz == null) {
            return null;

        } else {

            if ((raiz.getIzquierdo() != null && raiz.getIzquierdo().getInfo().equals(hijo)) || (raiz.getDerecho() != null && raiz.getDerecho().getInfo().equals(hijo))) {
                return raiz;

            } else {
                Nodo x = BuscarPadre(raiz.getIzquierdo(), hijo);
                Nodo y = BuscarPadre(raiz.getDerecho(), hijo);
                if (x != null) {
                    return x;
                }
                if (y != null) {
                    return y;
                }

            }
            return null;
        }
    }
    private void Agregar1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Agregar1MouseClicked
        if (!AgregarTxt1.getText().isEmpty()) {
            raiz = new Nodo(AgregarTxt1.getText().trim());
            AgregarTxt1.setText("");
            AgregarTxt1.setEditable(false);
            AgregarTxt1.setEnabled(false);
            System.out.println(raiz.getInfo());
        } else {
            JOptionPane.showMessageDialog(null, "Digite valor para la raiz", "Error", JOptionPane.WARNING_MESSAGE);

        }

    }//GEN-LAST:event_Agregar1MouseClicked

    private void MostrarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MostrarButtonActionPerformed
        dibujar();
    }//GEN-LAST:event_MostrarButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        String x1, y1;
        x1 = "21";
        y1 = "3";
        if (BuscarHermano(x1, y1) == false) {
            System.out.println("Hermanos");

        }
    }//GEN-LAST:event_jButton1MouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        String a = JOptionPane.showInputDialog(null, "Nodo A");
        String b = JOptionPane.showInputDialog(null, "Nodo B");
        System.out.println(BuscarPrimo(raiz, BuscarNodo(raiz, a), BuscarNodo(raiz, b)));
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Arbol.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Arbol.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Arbol.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Arbol.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Arbol().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Agregar1;
    private javax.swing.JButton AgregarHijoButton;
    private javax.swing.JTextField AgregarHijosTxt;
    private javax.swing.JTextField AgregarTxt1;
    private javax.swing.JButton MostrarButton;
    private javax.swing.JPanel PanelArbol;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    // End of variables declaration//GEN-END:variables
}
